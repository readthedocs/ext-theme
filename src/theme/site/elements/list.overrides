/* https://github.com/Semantic-Org/Semantic-UI-CSS/pull/68 */
.ui.horizontal.list > .item > .icon + .content {
  width: auto;
}

.ui.horizontal.list > .item {
  &.left.aligned { text-align: left; }
  &.right.aligned { text-align: right; }
  &.center.aligned { text-align: center; }
}

.ui.list > .item > .ui.menu.right,
.ui.list > .item .description .ui.text.menu {
  min-height: auto;
  margin-top: .25rem;
  margin-bottom: .25rem;

  > .item:first-child {
    // TODO if there is no right float menu, we actually want this padding. For
    // now we likely will just always have a right float menu
    // padding-left: 0rem;
  }
}

// Bug fix for a i.list.icon inside a div.ui.list
.ui.list .list.icon {
  padding-left: 0em;
}

// For build detail page
.ui.command.list {
  > .item {
    > .icon {
      margin: 0px;
      user-select: none;

      > i.linkify.icon {
        color: darken(@grey, 20%);

        &:hover, &:active {
          color: @grey;
        }
      }
    }

    > .command.content {
      color: @lightOlive;

      .ui.timing.label {
        background: fadeout(@grey, 80%);
        color: fadeout(@white, 70%);
        margin-left: 1em;
        padding: 4px 8px;
        user-select: none;

        &:hover {
          background: fadeout(@grey, 60%);
          color: fadeout(@white, 50%);
        }
      }
    }

    > .output.content {
      > .command.output.list {
        > .highlight.item {
          background: fadeout(@white, 85%);

          > .icon > i.linkify.icon {
            color: @grey;
          }
        }
      }

      // ansi_up control character classes
      span.ansi-black-fg { color: @black; }
      span.ansi-red-fg { color: @lightRed; }
      span.ansi-green-fg { color: @lightOlive; }
      span.ansi-yellow-fg { color: @lightYellow; }
      span.ansi-blue-fg { color: @lightBlue; }
      span.ansi-magenta-fg { color: @lightViolet; }
      span.ansi-cyan-fg { color: @lightPurple; }
      span.ansi-white-fg { color: @white; }

      span.ansi-black-bg { color: @black; }
      span.ansi-red-bg { color: @lightRed; }
      span.ansi-green-bg { color: @lightOlive; }
      span.ansi-yellow-bg { color: @lightYellow; }
      span.ansi-blue-bg { color: @lightBlue; }
      span.ansi-magenta-bg { color: @lightViolet; }
      span.ansi-cyan-bg { color: @lightPurple; }
      span.ansi-white-bg { color: @white; }
    }

    .command.content,
    .output.content .command.output.list .content {
      > pre {
        margin: 0em;
        > code {
          font-size: 14px;
          white-space: pre-wrap;
          word-wrap: break-word;
        }
      }
    }

  }
}

// HTTP exchange list for integrations
.ui.http-exchange.list {
  > .item {
    > span.header {
      display: inline;
      color: @lightViolet;
    }
    > span.value { color: @white; }
  }
}
.ui.http-exchange.text .highlight > pre {
  /* Pygments */
  .hll { background-color: #ffffcc }
  .c { color: @grey; } /* Comment */
  .err { color: @red; } /* Error */
  .k { color: @lightBlue; } /* Keyword */
  .o { color: @grey } /* Operator */
  .cm { color: @grey; } /* Comment.Multiline */
  .cp { color: @grey; } /* Comment.Preproc */
  .c1 { color: @grey; } /* Comment.Single */
  .cs { color: @grey; } /* Comment.Special */
  .gd { color: @red; } /* Generic.Deleted */
  .ge { font-style: italic; } /* Generic.Emph */
  .gr { color: @red; } /* Generic.Error */
  .gh { color: @white; } /* Generic.Heading */
  .gi { color: @green; } /* Generic.Inserted */
  .go { color: @grey; } /* Generic.Output */
  .gp { color: @olive; } /* Generic.Prompt */
  .gs { font-weight: bold; } /* Generic.Strong */
  .gu { color: @white; } /* Generic.Subheading */
  .gt { color: @white; } /* Generic.Traceback */
  .kc { color: @lightViolet; } /* Keyword.Constant */
  .kd { color: @lightViolet; } /* Keyword.Declaration */
  .kn { color: @lightPurple; font-weight: bold } /* Keyword.Namespace */
  .kp { color: @lightPurple; } /* Keyword.Pseudo */
  .kr { color: @lightPurple; font-weight: bold } /* Keyword.Reserved */
  .kt { color: @lightPurple; } /* Keyword.Type */
  .m { color: @lightPurple; } /* Literal.Number */
  .s { color: @olive; } /* Literal.String */
  .na { color: @purple; } /* Name.Attribute */
  .nb { color: @lightPurple; } /* Name.Builtin */
  .nc { color: @lightPurple; font-weight: bold } /* Name.Class */
  .no { color: @lightPurple; } /* Name.Constant */
  .nd { color: @lightPurple; font-weight: bold } /* Name.Decorator */
  .ni { color: @lightPurple; font-weight: bold } /* Name.Entity */
  .ne { color: @lightPurple; } /* Name.Exception */
  .nf { color: @lightPurple; } /* Name.Function */
  .nl { color: @lightPurple; font-weight: bold } /* Name.Label */
  .nn { color: @lightPurple; font-weight: bold } /* Name.Namespace */
  .nt { color: @olive; font-weight: bold } /* Name.Tag */
  .nv { color: @lightPurple; } /* Name.Variable */
  .ow { color: @lightPurple; font-weight: bold } /* Operator.Word */
  .w { color: @white; } /* Text.Whitespace */
  .mb { color: @lightPurple; } /* Literal.Number.Bin */
  .mf { color: @lightPurple; } /* Literal.Number.Float */
  .mh { color: @lightPurple; } /* Literal.Number.Hex */
  .mi { color: @lightPurple; } /* Literal.Number.Integer */
  .mo { color: @lightPurple; } /* Literal.Number.Oct */
  .sb { color: @lightPurple; } /* Literal.String.Backtick */
  .sc { color: @lightPurple; } /* Literal.String.Char */
  .sd { color: @lightPurple; font-style: italic } /* Literal.String.Doc */
  .s2 { color: @lightPurple; } /* Literal.String.Double */
  .se { color: @lightPurple; font-weight: bold } /* Literal.String.Escape */
  .sh { color: @lightPurple; } /* Literal.String.Heredoc */
  .si { color: @lightPurple; font-style: italic } /* Literal.String.Interpol */
  .sx { color: @lightPurple; } /* Literal.String.Other */
  .sr { color: @lightPurple; } /* Literal.String.Regex */
  .s1 { color: @lightPurple; } /* Literal.String.Single */
  .ss { color: @lightPurple; } /* Literal.String.Symbol */
  .bp { color: @yellow; } /* Name.Builtin.Pseudo */
  .vc { color: @yellow; } /* Name.Variable.Class */
  .vg { color: @yellow; } /* Name.Variable.Global */
  .vi { color: @yellow; } /* Name.Variable.Instance */
  .il { color: @lightPurple; } /* Literal.Number.Integer.Long */
}


// Footer
footer .ui.horizontal.list {
  > .item {

    > .icon {
      color: @grey;
    }

    .header, .sub.header {
      color: @grey;
    }
  }
}
